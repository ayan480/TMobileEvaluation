// Generated by Dagger (https://dagger.dev).
package com.syncoders.domain.di;

import com.syncoders.domain.repository.auth.AuthRepository;
import com.syncoders.domain.usecase.auth.AuthUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation"
})
public final class UseCaseModule_ProvideAuthUseCaseFactory implements Factory<AuthUseCase> {
  private final UseCaseModule module;

  private final Provider<AuthRepository> authRepositoryProvider;

  public UseCaseModule_ProvideAuthUseCaseFactory(UseCaseModule module,
      Provider<AuthRepository> authRepositoryProvider) {
    this.module = module;
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public AuthUseCase get() {
    return provideAuthUseCase(module, authRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideAuthUseCaseFactory create(UseCaseModule module,
      Provider<AuthRepository> authRepositoryProvider) {
    return new UseCaseModule_ProvideAuthUseCaseFactory(module, authRepositoryProvider);
  }

  public static AuthUseCase provideAuthUseCase(UseCaseModule instance,
      AuthRepository authRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideAuthUseCase(authRepository));
  }
}
