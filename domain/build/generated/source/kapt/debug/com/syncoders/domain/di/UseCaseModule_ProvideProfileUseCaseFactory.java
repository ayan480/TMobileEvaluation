// Generated by Dagger (https://dagger.dev).
package com.syncoders.domain.di;

import com.syncoders.domain.repository.profile.ProfileRepository;
import com.syncoders.domain.usecase.profile.ProfileUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation"
})
public final class UseCaseModule_ProvideProfileUseCaseFactory implements Factory<ProfileUseCase> {
  private final UseCaseModule module;

  private final Provider<ProfileRepository> profileRepositoryProvider;

  public UseCaseModule_ProvideProfileUseCaseFactory(UseCaseModule module,
      Provider<ProfileRepository> profileRepositoryProvider) {
    this.module = module;
    this.profileRepositoryProvider = profileRepositoryProvider;
  }

  @Override
  public ProfileUseCase get() {
    return provideProfileUseCase(module, profileRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideProfileUseCaseFactory create(UseCaseModule module,
      Provider<ProfileRepository> profileRepositoryProvider) {
    return new UseCaseModule_ProvideProfileUseCaseFactory(module, profileRepositoryProvider);
  }

  public static ProfileUseCase provideProfileUseCase(UseCaseModule instance,
      ProfileRepository profileRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideProfileUseCase(profileRepository));
  }
}
